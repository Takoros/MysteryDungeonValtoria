{% extends 'base.html.twig' %}

{% block title %}PMD : Valtoria | Profil{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/Character/app_character.css') }}">
{% endblock %}

{% block body %}
    <div class="characterShowTitle">{% if isSelfCharacter %}{{ 'profil'|trans({}, 'app') }}{% else %}{{ 'profil_de'|trans({}, 'app') }} {{ character.getName() }} {% endif %}</div>

    <div class="profileCharacterCard">
        <div class="xpBar" title="EXP : {{ character.getXP() }} / {{ character.getXPCeil() }} ({{ character.getXPPercentage() }}%)"><div class="xpBarFill" style='width: {{ character.getXPPercentage() }}%;'></div></div>

        <div class="profileCharacterCardUpper">
            <div class="cardUpperLeft">
                <div class="speciesIcon"><img src="{{ asset(character|speciesIcon) }}"></div>
            </div>
            <div class="cardUpperRight">
                <div class="cardUpperRightNameLevelGender">
                    <div class="cardUpperRightName">{{ 'nom'|trans({}, 'app') }} : {{ character.name }}</div>
                    | <div class="cardUpperRightLevel">{{ 'niveau'|trans({}, 'app') }} : {{ character.level }} ({{ 'exp'|trans({}, 'app') }} : {{ character.xp }} / {{ character.getXPCeil() }})</div>
                    {% if character.gender == 'Mâle' %}
                        <img class="genderIcon" src="{{ asset('icons/male.png') }}"  width='25px' height="25px" style="margin-right: 5px">
                    {% else %}
                        <img class="genderIcon" src="{{ asset('icons/female.png') }}" width='32px' height="30px">
                    {% endif %}
                </div>
                <div class="cardUpperRightSpeciesAgeRank">
                    <div class="cardUpperRightSpecies">{{ 'espece'|trans({}, 'app') }} : {{ character.Species|transSpecies }}</div>
                    | <div class="cardUpperRightAge">{{ 'age'|trans({}, 'app') }} : {{ character.age }}</div>
                    | <div class="cardUpperRightRank">{{ 'rang'|trans({}, 'app') }} : {{ 'cuivre'|trans({}, 'app') }}</div>
                </div>
                <div class="cardUpperRightSeparator"></div>
                <div class="cardUpperRightDescription">
                    {{ form_start(modifyDescriptionFormView, {'attr': {'class': 'modifyDescriptionForm'}}) }}
                        {{ form_widget(modifyDescriptionFormView.description, {'attr': {'disabled':true, 'data-id': 'modifyDescriptionTextArea'}}) }}
                    
                    {% if isSelfCharacter %}<div id="modifyDescriptionFormToggle" onClick="modifyDescriptionToggle()" class="modifyDescriptionFormToggle"></div>{% endif %}
                    <div id="modifyDescriptionValidationButtons" class="modifyDescriptionValidationButtons modifyDescriptionValidationButtonsHide">
                        <div class="modifyDescriptionValidationButtonCancel" onClick="OnCLickCancel()">{{ 'annuler'|trans({}, 'app') }}</div>
                        {{ form_widget(modifyDescriptionFormView.submit,{'attr': {'class':'modifyDescriptionValidationButtonSubmit'}, 'label': 'dungeon_create_form_confirm'|trans({}, 'app')}) }}
                    </div>
                    {{ form_end(modifyDescriptionFormView) }}
                </div>
            </div>
        </div>
        <div class="profileCharacterCardSeparator"></div>
        <div class="profileCharacterCardLower">
            <div class="profileCharacterCardLowerTitle">{{ 'statistiques'|trans({}, 'app') }} :</div>

            {% include "Character/show_stats.html.twig" %}
        </div>
        <div class="profileCharacterCardSeparator"></div>
        <div class="profileCharacterCardBottom">
            <div class="profileCharacterCardBottomTitle">{{ 'rotations'|trans({}, 'app') }} :</div>

            <div id="mobileSwapShowButton" class="mobileSwapShow" onClick="mobileSwapRotationShow()">{{ 'voir_rotation'|trans({}, 'app') }}</div>

            <table class="profileCharacterCardBottomTable">
                <thead class="profileCharacterCardBottomTableThead">
                    <tr>
                        <th colspan="1">N°</th>
                        <th class="rotationTh openerItem" colspan="2">{% if isSelfCharacter %}<a class="modifyRotationLink" href="{{ path('app_character_modify_rotation',{'type':'Opener'}) }}"></a>{% endif %} {{ 'opener'|trans({}, 'app') }} <span class="rotationCostResume">({{ character.getOpenerRotation().getActionPointUsed() }} / {{ character.getStats().getActionPoint() }} <img class="profileCharacterCardStatIcon" src="{{ asset('icons/stats/actionPoint.png') }}">)</span></th>
                        <th class="rotationTh rotationItem" colspan="2">{% if isSelfCharacter %}<a class="modifyRotationLink" href="{{ path('app_character_modify_rotation',{'type':'Rotation'}) }}"></a>{% endif %} {{ 'rotation'|trans({}, 'app') }} <span class="rotationCostResume">({{ character.getRotation().getActionPointUsed() }} / {{ character.getStats().getActionPoint() }} <img class="profileCharacterCardStatIcon" src="{{ asset('icons/stats/actionPoint.png') }}">)</span></th>
                    </tr>
                </thead>
                <tbody>
                    {% set i = 1 %}
                    {% for attackNumber in ['One', 'Two', 'Three', 'Four', 'Five'] %}
                        <tr class="valueTr">
                            <td rowspan="2">{{ i }}</td>
                            <td class="openerItem">{{ character.getOpenerRotation().getAttack(attackNumber).getActionPointCost() }} <img class="profileCharacterCardStatIcon" src="{{ asset('icons/stats/actionPoint.png') }}"></td>
                            <td class="openerItem">{{ character.getOpenerRotation().getAttack(attackNumber).getName()|transAttack }} <img title="{{ character.getOpenerRotation().getAttack(attackNumber).getType().getName() }}" class="profileCharacterCardTypeIcon" src="{{ asset(character.getOpenerRotation().getAttack(attackNumber).getType() | typeIcon) }}"></td>
                            <td class="rotationItem">{{ character.getRotation().getAttack(attackNumber).getActionPointCost() }} <img class="profileCharacterCardStatIcon" src="{{ asset('icons/stats/actionPoint.png') }}"></td>
                            <td class="rotationItem">{{ character.getRotation().getAttack(attackNumber).getName()|transAttack }} <img title="{{ character.getOpenerRotation().getAttack(attackNumber).getType().getName() }}" class="profileCharacterCardTypeIcon" src="{{ asset(character.getRotation().getAttack(attackNumber).getType() | typeIcon) }}"></td>
                        </tr>
                        <tr class="descriptionTr">
                            <td colspan="2" class="openerItem">{{ character.getOpenerRotation().getAttack(attackNumber).getName()|transAttackDesc }}</td>
                            <td colspan="2" class="rotationItem">{{ character.getRotation().getAttack(attackNumber).getName()|transAttackDesc }}</td>
                        </tr>
                        {% set i = i + 1 %}
                    {% endfor %}
                </tbody>
            </table>

        </div>
    </div>

    {% if isSelfCharacter %}
        <div class="profileFightListCard">
            <div class="profileFightListCardTitle">{{ 'combats_recents'|trans({}, 'app') }}</div>
                {% if character.getCombatLogs()|length > 0 %}
                    <div class="profileFightListContainer">
                        {% for combat in character.getLastTenCombatLogs()  %}
                            <a href="{{ path('app_combat', {'id': combat.id}) }}">
                                <div class="fightLine">
                                    <div class="fightLineWinStatus">
                                        {% if combat.isCharacterTeamWinner(character) %}
                                            <span class="fightLineWinStatusVictory">{{ 'victoire'|trans({}, 'app') }}</span>
                                        {% else %}
                                            <span class="fightLineWinStatusDefeat">{{ 'defaite'|trans({}, 'app') }}</span>
                                        {% endif %}
                                    </div>
                                    <div class="fightLineArea">{{ combat.location|trans({}, 'app') }}</div>
                                    <div class="fightLineSeparator"></div>
                                    <div class="fightLineDate">{{ combat.dateCreation | date('d/m/Y H:i')}}</div>
                                    <div class="fightLineMessage">{{ combat.message }}</div>
                                </div>
                            </a>
                        {% endfor %}
                    </div>
                {% else %}
                    <div class="noCombatLogMessage">{{ 'vous_avez_pas_encore_de_combat'|trans({}, 'app') }}</div>
                {% endif %}
        </div>
    {% endif %}
{% endblock %}

{% block javascripts %}
    <script>
        var spendPrimaryPointButtons = document.getElementsByClassName('spendPrimaryPointButton');
        var spendSecondaryPointButtons = document.getElementsByClassName('spendSecondaryPointButton');
        spendPrimaryPointButtons = Array.prototype.slice.call(spendPrimaryPointButtons);
        spendSecondaryPointButtons = Array.prototype.slice.call(spendSecondaryPointButtons);

        var showPrimaryButton = {% if character.Stats.primaryStatPoint == 0 %} false {% else %} true {% endif %};
        var showSecondaryButton = {% if character.Stats.secondaryStatPoint == 0 %} false {% else %} true {% endif %};

        if(showPrimaryButton === false){
            spendPrimaryPointButtons.forEach((spendPointButton) => {
                spendPointButton.classList.add("spendPointButtonHide");
            });
        }

        if(showSecondaryButton === false){
            spendSecondaryPointButtons.forEach((spendPointButton) => {
                spendPointButton.classList.add("spendPointButtonHide");
            });
        }

        function spendPoints(stat, type){
            fetch(`{{ path('app_character_spend_point') }}`, {
                method: 'POST',
                body: JSON.stringify({
                    "data": {
                        'statToIncrease' : stat
                    }
                }), // string or object
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            }).then((result) => {
                result = result.json().then((result) => {
                    if(result.statusCode === 200){
                        valueDiv = document.getElementById(stat+'Value')

                        if(type === 'primary'){
                            statPointValueDiv = document.getElementById('primaryStatPointValue');
                            valueDiv.innerText = result.newStatValue;
                            statPointValueDiv.innerText = result.newPrimaryStatPointsValue;

                            if(result.newPrimaryStatPointsValue === 0){
                                spendPrimaryPointButtons.forEach((spendPointButton) => {
                                    spendPointButton.classList.add("spendPointButtonHide");
                                });
                            }
                        }
                        else if (type === 'secondary'){
                            statPointValueDiv = document.getElementById('secondaryStatPointValue');
                            valueDiv.innerText = result.newStatValue;
                            statPointValueDiv.innerText = result.newSecondaryStatPointsValue;

                            if(result.newSecondaryStatPointsValue === 0){
                                spendSecondaryPointButtons.forEach((spendPointButton) => {
                                    spendPointButton.classList.add("spendPointButtonHide");
                                });
                            }
                        }
                    }
                    else {
                        newFlashMessage(result.message, 'flashWarning');
                    }
                    
                });
            });
        }

        let mobileRotationShowStates = ['Opener','Rotation']
        let currentMobileRotationShow = 0;
        
        var mobileSwapShowButton = document.getElementById('mobileSwapShowButton');

        var rotationItems = document.getElementsByClassName('rotationItem');
        rotationItems = Array.prototype.slice.call(rotationItems);

        var openerItems = document.getElementsByClassName('openerItem');
        openerItems = Array.prototype.slice.call(openerItems);

        openerItems.forEach((item) => {
            item.classList.add('showItem');
        })

        function mobileSwapRotationShow(){
            mobileSwapShowButton.innerText = `{{ 'voir'|trans({}, 'app')}} ${mobileRotationShowStates[currentMobileRotationShow]}`;
            if(currentMobileRotationShow === 0){
                currentMobileRotationShow = 1;
            }
            else {
                currentMobileRotationShow = 0;
            }

            if(mobileRotationShowStates[currentMobileRotationShow] === 'Opener'){
                rotationItems.forEach((item) => {
                    item.classList.remove('showItem')
                });

                openerItems.forEach((item) => {
                    item.classList.add('showItem');
                })
            }
            else if(mobileRotationShowStates[currentMobileRotationShow] === 'Rotation') {
                openerItems.forEach((item) => {
                    item.classList.remove('showItem');
                })

                rotationItems.forEach((item) => {
                    item.classList.add('showItem')
                });
            }
        }

        function modifyDescriptionToggle(){
            var modifyDescriptionToggleButton = document.getElementById('modifyDescriptionFormToggle');
            var modifyDescriptionTextArea = document.querySelectorAll("[data-id='modifyDescriptionTextArea']")[0];
            var modifyDescriptionValidationButtons = document.getElementById('modifyDescriptionValidationButtons');
            modifyDescriptionToggleButton.classList.add('modifyDescriptionFormToggleHide');
            modifyDescriptionTextArea.disabled = false;
            modifyDescriptionValidationButtons.classList.remove('modifyDescriptionValidationButtonsHide');
        }

        function OnCLickCancel(){
            location.reload();
        }
    </script>
{% endblock %}