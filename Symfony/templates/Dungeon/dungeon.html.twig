{% extends "base.html.twig" %}

{% block title %}PMD : Valtoria | {{ 'donjon'|trans({}, 'app') }} {% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/dungeon/app_dungeon.css') }}">
    <link rel="stylesheet" href="{{ asset('css/_shared/_character-card.css') }}">
{% endblock %}

{% block body %}
    {% if dungeonInstance is not null %}
        {% set dungeon = dungeonInstance.getContent()['dungeon'] %}
        {% set data = dungeonInstance.getContent()['data'] %}
        {% set currentExplorersPosition = dungeonInstance.getCurrentExplorersPosition() %}

        {% include "Dungeon/_dungeon-show.html.twig" %}
    {% else %}
        <div class="noDungeonImage"><img src="{{ asset('images/evoli-sleep.png') }}" alt="Evoli qui dort"></div>
        <div class="noDungeonTitle">{{ 'vous_etes_dans_aucun_donjon'|trans({}, 'app') }}</div>
        
        {% if app.user.character.timers.getCooldownDungeonTime() is not null %}
            <div class="noDungeonCooldownTimerContainer">
                <p>{{ 'temps_de_recuperation_avant_la_prochaine_charge'|trans({}, 'app') }}</p>
                <div id="noDungeonCooldownTimer">-</div>  
            </div>
        {% endif %}

        {% if app.user.character.timers.getDungeonCharges() > 0 %}
            <div class="noDungeonChargesNumber">{{ 'charge_de_donjon_actuelle'|trans({}, 'app') }} {{ app.user.character.timers.getDungeonCharges() }} / {{ constant('App\\Entity\\Timers::MAX_DUNGEON_CHARGES') }}</div>
            <a class="noDungeonCreateDungeonInstanceLink" href="{{ path('app_dungeon_create') }}">
                <div class="noDungeonCreateDungeonInstance">{{ 'creer_un_groupe_exploration'|trans({}, 'app') }}</div>
            </a>
            
            <div class="joinDungeonInstanceSeparator"></div>

            <div class="joinDungeonInstanceTitle">{{ 'un_groupe_vous_attends_rejoignez_le'|trans({}, 'app') }}</div>

            {{ form_start(joinDungeonInstanceView, {'attr': {'class': 'dungeonInstanceJoin_form'}}) }}
                <div class="joinInviteCodePannel">
                    <div class="joinInviteCodePannelTitle">{{ 'code_invitation'|trans({}, 'app') }}</div>
                    {{ form_widget(joinDungeonInstanceView.inviteCode, {'attr': {'class': 'dungeonInstanceJoin_formWidget joinInviteCodePannelContent'}}) }}
                </div>
            {{ form_end(joinDungeonInstanceView) }}
        {% endif %}
    {% endif %}

{% endblock %}

{% block javascripts %}
    {% if dungeonInstance is not null %}
        <script>
            const directionButtons = document.querySelectorAll("[data-direction]");
            var errorMessages = document.getElementsByClassName('dungeonErrorMessages')[0];

            function sendEnterDungeonCall(){
                let urlToCall = "{{ path('app_dungeon_instance_enter', {'id' : dungeonInstance.id}) }}";

                fetch(urlToCall).then(function(response){
                    if(response.status === 200){
                        location.reload();
                    }
                    else if(response.status === 400){
                        response.json().then(function(jsonData){
                            errorMessages.innerHTML = jsonData.message
                        });
                    }
                })
            }

            function sendLeaveApiCall(){
                let urlToCall = "{{ path('app_dungeon_instance_leave', {'id' : dungeonInstance.id}) }}";

                fetch(urlToCall).then(function(response){
                    if(response.status === 200){
                        location.reload();
                    }
                    else if(response.status === 400){
                        response.json().then(function(jsonData){
                            errorMessages.innerHTML = jsonData.message
                        });
                    }
                })
            }

            function sendMovementApiCall(direction){
                let urlToCall = "{{ path('app_dungeon_instance_move', {'id' : dungeonInstance.id, 'direction' : 'DIRECTION'}) }}";
                urlToCall = urlToCall.replace('DIRECTION', direction);
                
                fetch(urlToCall).then(function(response) {
                    if(response.status === 200){
                        location.reload();
                    }
                    else if(response.status === 400){
                        response.json().then(function(jsonData){
                            errorMessages.innerHTML = jsonData.message
                        });
                    }
                });
            }

            function sendFightApiCall(){
                let urlToCall = "{{ path('app_dungeon_instance_fight', {'id' : dungeonInstance.id}) }}";

                fetch(urlToCall).then(function(response){
                    if(response.status === 200){
                        location.reload();
                    }
                    else if(response.status === 400){
                        response.json().then(function(jsonData){
                            errorMessages.innerHTML = jsonData.message
                        });
                    }
                })
            }

            function sendInteractApiCall(){
                let urlToCall = "{{ path('app_dungeon_instance_interact', {'id' : dungeonInstance.id}) }}";

                fetch(urlToCall).then(function(response){
                    if(response.status === 200){
                        location.reload();
                    }
                    else if(response.status === 400){
                        response.json().then(function(jsonData){
                            errorMessages.innerHTML = jsonData.message
                        });
                    }
                })
            }
        </script>
    {% endif %}

    {% if app.user.character.timers.getCooldownDungeonTime() is not null and dungeonInstance is null%}
        <script>
            var month = {{app.user.character.timers.getCooldownDungeonTime()|date("m")}}-1;
            var countDownDate = new Date({{app.user.character.timers.getCooldownDungeonTime()|date("Y,")}} month, {{app.user.character.timers.getCooldownDungeonTime()|date("d,H,i,s")}});

            // Update the count down every 1 second
            var x = setInterval(function() {

            // Get today's date and time
            var now = new Date().getTime();

            // Find the distance between now and the count down date
            var distance = countDownDate - now;
            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Display the result in the element with id="demo"
            document.getElementById("noDungeonCooldownTimer").innerHTML =  hours + "h " + minutes + "m " + seconds + "s ";

            // If the count down is finished, write some text
            if (distance < 0) {
                clearInterval(x);
                document.getElementById("noDungeonCooldownTimer").innerHTML = "PrÃªt !";
                window.location.reload();
            }
            }, 1000);
        </script>
    {% endif %}
{% endblock %}