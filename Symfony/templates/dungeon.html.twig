{% extends "base.html.twig" %}

{% block title %}PDM : Valtoria | Dungeon Preview {% endblock %}

{% block body %}
    <h1 style='margin-bottom: 3px'>{{ dungeonInstance.dungeon.name }}</h1>
    
    <h2 style='text-align:center; margin-top:0;'>Statut : {{ dungeonInstance.status|DungeonInstanceStatus }}</h2>

    {% if dungeonInstance.status == 'dungeon_status_preparation'%}
        <div style='text-align:center; font-size:22px; font-style: italic;'>Votre équipe se prépare à entrer dans le donjon.</div>
        <hr>
        <h2 style='text-align:center; margin-bottom: 0;'>Composition de l'équipe</h2>
        <h2 style='text-align:center; margin-top:0; font-size: 20px'>{{dungeonInstance.explorers|length}}/4 aventuriers</h2>
        <div class="dungeon-preparation-character-container">
            {% for character in dungeonInstance.explorers %}
                {% include '_shared/_character-card.html.twig' %}
            {% endfor %}
        </div>

        <div style="display:flex;justify-content:center;">
            <button onclick="sendEnterDungeonCall()" class="dungeonButton buttonEnterDungeon">Entrer dans le donjon</button>
        </div>
        <div style="margin-top:20px" class="dungeonEndingButton">
            <button onclick="sendLeaveApiCall()" class="dungeonButton ButtonLeave"><img src="{{ asset('icons/exit.png') }}" width='25px'></button>
        </div>
        <div class="dungeonErrorMessages"></div>
    {% else %}
        <div class="dungeonGame">
            <div class="dungeonTips">
                <div class="dungeonTipsRow">
                    <div class="tile-tip tile-unknown"></div>
                    <div class="tile-tip-text">Pièce inconnue du donjon, que contient-elle ?</div>
                </div>
                <div class="dungeonTipsRow">
                    <div class="tile-tip tile-empty"></div>
                    <div class="tile-tip-text">Ceci est un mur, vous ne pouvez vous y rendre.</div>
                </div>
                <div class="dungeonTipsRow">
                    <div class="tile-tip tile-full"></div>
                    <div class="tile-tip-text">Pièce vide du donjon, passez votre chemin.</div>
                </div>
                <div class="dungeonTipsRow">
                    <div class="tile-tip tile-entrance"></div>
                    <div class="tile-tip-text">Entrée du donjon.</div>
                </div>
                <div class="dungeonTipsRow">
                    <div class="tile-tip tile-exit"></div>
                    <div class="tile-tip-text">Sortie du donjon.</div>
                </div>
                <div class="dungeonTipsRow" style="margin-bottom : 10px">
                    <div class="tile-tip tile-monsters-1" style="margin-right: 2px"></div>
                    <div class="tile-tip tile-monsters-2" style="margin-right: 2px"></div>
                    <div class="tile-tip tile-monsters-3"></div>
                    <div class="tile-tip-text">Pokémon(s) sauvage(s) en vue !</div>
                </div>
                <div class="dungeonTipsSeparator"></div>
                <div class="dungeonTipsNotes">
                    <div class="dungeonTipsNotesTitle">Notes</div>
                    <ul>
                        <li>Pour compléter le donjon, vous devez trouver la sortie et sortir.</li>
                        <li>Vous ne pouvez pas vous enfuir d'une case contenant un/des pokémon(s) sauvage(s)</li>
                    </ul>
                </div>
            </div>
            <div class="dungeon">
                {% for y in data.maxY .. data.minY %}
                    <div class="dungeon-row">
                        {% for x in data.minX .. data.maxX %}
                            {% set tilePos = y ~ ',' ~ x %}
                                <div title='{{ tilePos }}' class="{{ dungeon[tilePos] |dungeonTile(currentExplorersPosition, tilePos) }}"></div>
                        {% endfor %}
                    </div>
                {% endfor %}
            </div>
            <div style="width: 33%; margin-top: -10px">
                <div class="dungeonExplorersList">
                    {% for character in dungeonInstance.explorers %}
                        {% include '_shared/_character-card.html.twig' %}
                    {% endfor %}
                </div>
            </div>
        </div>

        <div class="dungeonButtons">
            {% if dungeonInstance.status == 'dungeon_status_exploration' %}
                <div class="dungeonDirectionButtons">
                    <button onclick="sendMovementApiCall('left')" class="dungeonButton"><img src="{{ asset('icons/arrow_left.png') }}" width='25px'></button>
                    <button onclick="sendMovementApiCall('up')" class="dungeonButton"><img src="{{ asset('icons/arrow_up.png') }}" width='20px'></button>
                    <button onclick="sendMovementApiCall('down')" class="dungeonButton"><img src="{{ asset('icons/arrow_down.png') }}" width='20px'></button>
                    <button onclick="sendMovementApiCall('right')" class="dungeonButton"><img src="{{ asset('icons/arrow_right.png') }}" width='25px'></button>
                </div>
                <div class="dungeonInteractionButtons">
                    <button onclick="sendFightApiCall()" class="dungeonButton ButtonFight"><img src="{{ asset('icons/dual-swords.svg') }}" width='28px'></button>
                    <button onclick="sendInteractApiCall()" class="dungeonButton ButtonInteract"><img src="{{ asset('icons/hand.png') }}" width='28px'></button>
                </div>
            {% else %}
                <div class="dungeonEndingButton">
                    <button onclick="sendLeaveApiCall()" class="dungeonButton ButtonLeave"><img src="{{ asset('icons/exit.png') }}" width='25px'></button>
                </div>
            {% endif %}
        </div>

        <div class="dungeonErrorMessages"></div>

        <div style='display:flex; justify-content: space-around; margin-top:20px'>
            <div class="dungeonFightsLogs">
                <div class="dungeonFightsLogsTitle">Liste des combats</div>
                <div class="dungeonFightsLogsSeparator"></div>
                <div class="dungeonFightsLogsList">
                    <ul>
                        {% for fightLog in dungeonInstance.Fights|reverse %}
                            {% if fightLog.winner == 1 %}
                                <li class="dungeonFightsLogsListLiVictory">
                            {% else %}
                                <li class="dungeonFightsLogsListLiDefeat">
                            {% endif %}
                                    <a href="{{ path('app_combat', {'id' : fightLog.id }) }}" style='display:flex; align-items:center;'>
                                        {% if fightLog.winner == 1 %}
                                            <span style='margin-right:5px; color: rgb(2, 188, 2);'>[VICTOIRE]</span> {{ fightLog.teamTwo|length }} Pokémons sauvages vaincus ({{fightLog.message}})
                                        {% else %}
                                            <span style='margin-right:5px; color:red;'>[DÉFAITE]</span> Votre équipe a été vaincu. ({{fightLog.message}})
                                        {% endif %}
                                    </a>
                                </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
            <div style='width: 550px'></div>
            <div style='width: 550px'></div>
        </div>
    {% endif %}
    


    <div class="no-footer"></div>

    <script>
        const directionButtons = document.querySelectorAll("[data-direction]");
        var errorMessages = document.getElementsByClassName('dungeonErrorMessages')[0];

        function sendMovementApiCall(direction){
            let urlToCall = "{{ path('app_dungeon_instance_move', {'id' : dungeonInstance.id, 'direction' : 'DIRECTION'}) }}";
            urlToCall = urlToCall.replace('DIRECTION', direction);
            
            fetch(urlToCall).then(function(response) {
                if(response.status === 200){
                    location.reload();
                }
                else if(response.status === 400){
                    response.json().then(function(jsonData){
                        errorMessages.innerHTML = jsonData.message
                    });
                }
            });
        }

        function sendFightApiCall(){
            let urlToCall = "{{ path('app_dungeon_instance_fight', {'id' : dungeonInstance.id}) }}";

            fetch(urlToCall).then(function(response){
                if(response.status === 200){
                    location.reload();
                }
                else if(response.status === 400){
                    response.json().then(function(jsonData){
                        errorMessages.innerHTML = jsonData.message
                    });
                }
            })
        }

        function sendEnterDungeonCall(){
            let urlToCall = "{{ path('app_dungeon_instance_enter', {'id' : dungeonInstance.id}) }}";

            fetch(urlToCall).then(function(response){
                if(response.status === 200){
                    location.reload();
                }
                else if(response.status === 400){
                    response.json().then(function(jsonData){
                        errorMessages.innerHTML = jsonData.message
                    });
                }
            })
        }

        function sendInteractApiCall(){
            let urlToCall = "{{ path('app_dungeon_instance_interact', {'id' : dungeonInstance.id}) }}";

            fetch(urlToCall).then(function(response){
                if(response.status === 200){
                    location.reload();
                }
                else if(response.status === 400){
                    response.json().then(function(jsonData){
                        errorMessages.innerHTML = jsonData.message
                    });
                }
            })
        }

        function sendLeaveApiCall(){
            let urlToCall = "{{ path('app_dungeon_instance_leave', {'id' : dungeonInstance.id}) }}";

            fetch(urlToCall).then(function(response){
                if(response.status === 200){
                    location.reload();
                }
                else if(response.status === 400){
                    response.json().then(function(jsonData){
                        errorMessages.innerHTML = jsonData.message
                    });
                }
            })
        }
    </script>
{% endblock %}